AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Template used for building AUR packages and adding them to a custom S3-based repository.

Parameters:

  # Environment parameters
  StageName:
    Type: String
    Description: Name of the deployment environment used
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod

  # Details of the repository containing built packages within S3
  PersonalRepository:
    Type: String
    Description: The URL of the location of the personal repository
  PersonalRepoBucket:
    Type: String
    Description: The name of the bucket of the personal repository
  RepoName:
    Type: String
    Description: The name of the personal repository - usually the name of the DB file without the extension
  RepoArch:
    Type: String
    Description: The architecture to build the packages for
    Default: "x86_64"
  AurPackager:
    Type: String
    Description: The name and email of the person who packaged the AUR package

  # Reflector variables
  RepositoryCountries:
    Type: String
    Description: Comma-separated country codes used for finding the best mirror for package downloads
    Default: "IE,GB"

  # Secret keys
  GithubWebhookSecret:
    Type: String
    Description: Secret key used within the Github webhook
    Default: '{{resolve:ssm:githubToken:1}}'
  PushoverToken:
    Type: String
    Description: Token used to notify built packages via Pushover
    Default: '{{resolve:ssm:pushoverToken:1}}'
  PushoverUser:
    Type: String
    Description: User used to notify built packages via Pushover
    Default: '{{resolve:ssm:pushoverUser:1}}'
  AurKeyParam:
    Type: String
    Description: The name of the private key within the Parameter Store used to sign built packages
    Default: "aur_key"
  AurKeyDecrypt:
    Type: String
    Description: The KMS key used to encrypt/decrypt the parameter store key above (key/{guid})

  # Names of the ECS objects
  MaxTaskCount:
    Type: Number
    Description: The maximum number of ECS tasks to run simultaneously
    MinValue: 0
    Default: 4

Globals:
  Function:
    Timeout: 3
    Runtime: python3.8

Resources:

  #####
  # Functions
  ###
  PackageUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "package-update-${StageName}"
      Description: Scheduled updating of the package list in all repositories
      CodeUri: package_updater
      Handler: update_packages.lambda_handler
      Timeout: 600
      MemorySize: 512
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PackageTable
      Environment:
        Variables:
          COUNTRIES: !Ref RepositoryCountries
          PERSONAL_REPO: !Ref PersonalRepository
          PACKAGE_TABLE: !Ref PackageTable
      Events:
        PackageUpdateSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(6 hours)
      Layers:
        - !Ref AwsLayer

  RepoUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "repo-update-${StageName}"
      Description: Scheduled updating of the personal repository
      CodeUri: repo_updater
      Handler: update_repo.lambda_handler
      Timeout: 60
      Role: !GetAtt ExtractRole.Arn
      Environment:
        Variables:
          ECS_CLUSTER: !Ref PkgbuildCluster
          TASK_DEFN: !Ref RepoUpdaterTaskDefinition
      Events:
        RepoUpdateSchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 * * ? *)
      Layers:
        - !Ref AwsLayer

  PkgbuildRetrieverFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "pkgbuild-retriever-${StageName}"
      Description: API for pulling the PKGBUILD from Github
      CodeUri: pkgbuild_retriever
      Handler: retrieve_pkgbuild.lambda_handler
      Timeout: 20
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PkgbuildParserFunction
      Environment:
        Variables:
          NEXT_FUNC: !GetAtt PkgbuildParserFunction.Arn
          GITHUB_WEBHOOK_SECRET: !Ref GithubWebhookSecret
          STAGE_NAME: !Ref StageName
      Events:
        RetrievePkgbuildEvent:
          Type: Api
          Properties:
            Path: /update
            Method: post
            RestApiId: !Ref RetrievePkgbuildApi
      Layers:
        - !Ref AwsLayer

  PkgbuildParserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "pkgbuild-parser-${StageName}"
      Description: Parses the PKGBUILD and extracts a list of packages from it
      CodeUri: pkgbuild_parser
      Handler: parse_pkgbuild.lambda_handler
      Timeout: 10
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref FanoutStarterFunction
      Environment:
        Variables:
          NEXT_FUNC: !GetAtt FanoutStarterFunction.Arn
      Layers:
        - !Ref AwsLayer

  FanoutStarterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "fanout-starter-${StageName}"
      Description: A starter function to set up the fan-out and fan-in of building packages
      CodeUri: fanout_starter
      Handler: starter.lambda_handler
      Timeout: 60
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FanoutStatusTable
        - DynamoDBReadPolicy:
            TableName: !Ref PackageTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt FanoutQueue.QueueName
        - LambdaInvokePolicy:
            FunctionName: !Ref BuildFunction
      Environment:
        Variables:
          FANOUT_QUEUE: !Ref FanoutQueue
          PACKAGE_TABLE: !Ref PackageTable
          PERSONAL_REPO: !Ref PersonalRepoBucket
          BUILD_FUNC: !GetAtt BuildFunction.Arn
      Layers:
        - !Ref AwsLayer

  BuildFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "build-package-${StageName}"
      Description: Starts an ECS task to build a package and adds the package to the build queue
      CodeUri: pkg_builder
      Handler: build_package.lambda_handler
      Timeout: 60
      Role: !GetAtt ExtractRole.Arn
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BuildQueue.QueueName
      Environment:
        Variables:
          BUILD_QUEUE: !Ref BuildQueue
          ECS_CLUSTER: !Ref PkgbuildCluster
          TASK_DEFN: !Ref PkgbuildTaskDefinition
          TASK_FAMILY: !Sub "aur-pkgbuild-task-${StageName}"
          MAX_TASK_COUNT: !Ref MaxTaskCount
      Layers:
        - !Ref AwsLayer

  FanoutControllerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "fanout-controller-${StageName}"
      Description: Manages the parallel building of packages via the FanoutStatus table
      CodeUri: fanout_controller
      Handler: controller.lambda_handler
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FanoutStatusTable
        - LambdaInvokePolicy:
            FunctionName: !Ref MetapackageBuilderFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PackageUpdateFunction
      Environment:
        Variables:
          FANOUT_STATUS: !Ref FanoutStatusTable
          METAPACKAGE_BUILDER: !GetAtt MetapackageBuilderFunction.Arn
          PACKAGE_UPDATER: !GetAtt PackageUpdateFunction.Arn
      Layers:
        - !Ref AwsLayer
      Events:
        FanoutQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt FanoutQueue.Arn

  MetapackageBuilderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "metapackage-builder-${StageName}"
      Description: Retrieves the metapackage PKGBUILD and queues it for building
      CodeUri: metapackage_builder
      Handler: metapackage.lambda_handler
      Timeout: 20
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref FanoutStatusTable
        - LambdaInvokePolicy:
            FunctionName: !Ref BuildFunction
      Environment:
        Variables:
          BUILD_FUNC: !GetAtt BuildFunction.Arn
          PERSONAL_REPO: !Ref PersonalRepoBucket
          FANOUT_STATUS: !Ref FanoutStatusTable
      Layers:
        - !Ref AwsLayer

  #####
  # API's
  ###
  RetrievePkgbuildApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: 2.0
        info:
          title: "RetrievePkgbuildApi"
        paths:
          /update:
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PkgbuildRetrieverFunction.Arn}/invocations
                responses: {}
                httpMethod: "POST"
                type: "aws_proxy"
              x-amazon-apigateway-policy:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Principal: '*'
                    Action:
                      - execute-api:Invoke
                    Condition:
                      IpAddress:
                        aws:sourceIp:
                          - "192.30.252.0/22"
                          - "185.199.108.0/22"
                          - "140.82.112.0/20"

  #####
  # Roles
  ###
  ExtractRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ExtractRole-${StageName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "ExtractPolicy-${StageName}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessageBatch
                  - sqs:SendMessage
                  - ecs:RunTask
                  - iam:GetRole
                  - iam:PassRole
                Resource:
                  - !GetAtt BuildQueue.Arn
                  - !Ref PkgbuildTaskDefinition
                  - !Ref RepoUpdaterTaskDefinition
                  - !GetAtt BuildTaskRole.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  '*'
              - Effect: Allow
                Action:
                  - ecs:ListTasks
                Resource:
                  '*'
                Condition:
                  ArnEquals:
                    ecs:cluster: !GetAtt PkgbuildCluster.Arn

  BuildTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "AurPkgBuildTaskRole-${StageName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "AurPkgBuildTaskPolicy-${StageName}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt FanoutQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:PutObjectAcl
                Resource:
                  - !Join [ '' , [ 'arn:aws:s3:::', !Ref PersonalRepoBucket, '/*' ] ]
                  - !GetAtt BuildQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource:
                  - 'arn:aws:s3:::*'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AurKeyParam}
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  Fn::Sub: arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${AurKeyDecrypt}

  #####
  # Layers
  ###
  AwsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "aws-dependencies-${StageName}"
      Description: Dependencies for PKGBUILD apps
      ContentUri: src/
      CompatibleRuntimes:
        - python3.7
        - python3.8
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  #####
  # Queue's
  ###
  FanoutQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "fanout-queue-${StageName}"

  BuildQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "aur-pkg-build-${StageName}"
      VisibilityTimeout: 600

  #####
  # ECS
  ###
  PkgbuildCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "aur-pkgbuild-cluster-${StageName}"

  PkgbuildTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "aur-pkgbuild-task-${StageName}"
      Cpu: "4096"
      Memory: "8192"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: !GetAtt BuildTaskRole.Arn
      ExecutionRoleArn: !GetAtt BuildTaskRole.Arn
      ContainerDefinitions:
        - Name: "aur-pkg-build"
          Image: "couldinho/aur-pkg-build:latest"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: "/ecs/aur-pkg-build"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          Environment:
            - Name: "PUSHOVER_TOKEN"
              Value: !Ref PushoverToken
            - Name: "PUSHOVER_USER"
              Value: !Ref PushoverUser
            - Name: "REPO_NAME"
              Value: !Ref RepoName
            - Name: "REPO_BUCKET"
              Value: !Ref PersonalRepoBucket
            - Name: "REPO_ARCH"
              Value: !Ref RepoArch
            - Name: "SQS_QUEUE_URL"
              Value: !Ref BuildQueue
            - Name: "AWS_REGION"
              Value: !Ref AWS::Region
            - Name: "FANOUT_QUEUE"
              Value: !Ref FanoutQueue
            - Name: "AUR_KEY"
              Value: !Ref AurKeyParam
            - Name: "PACKAGER"
              Value: !Ref AurPackager

  RepoUpdaterTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "aur-repo-update-task-${StageName}"
      Cpu: "4096"
      Memory: "8192"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: !GetAtt BuildTaskRole.Arn
      ExecutionRoleArn: !GetAtt BuildTaskRole.Arn
      ContainerDefinitions:
        - Name: "aur-pkg-update"
          Image: "couldinho/aur-pkg-update:latest"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: "/ecs/aur-pkg-update"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          Environment:
            - Name: "PUSHOVER_TOKEN"
              Value: !Ref PushoverToken
            - Name: "PUSHOVER_USER"
              Value: !Ref PushoverUser
            - Name: "REPO_NAME"
              Value: !Ref RepoName
            - Name: "REMOTE_PATH"
              Value: !Join [ "", [ "s3://", !Ref PersonalRepoBucket, "/", !Ref RepoArch ] ]
            - Name: "AWS_REGION"
              Value: !Ref AWS::Region
            - Name: "AUR_KEY"
              Value: !Ref AurKeyParam
            - Name: "PACKAGER"
              Value: !Ref AurPackager

  #####
  # Database Tables
  ###
  PackageTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "package-table-${StageName}"
      PrimaryKey:
        Name: PackageName
        Type: String

  FanoutStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "fanout-status-${StageName}"
      AttributeDefinitions:
        - AttributeName: PackageName
          AttributeType: S
      KeySchema:
        - AttributeName: PackageName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3

Outputs:
  RetrievePkgbuildApi:
    Description: "API Gateway endpoint URL for `StageName` stage for PKGBUILD Retriever function"
    Value: !Sub "https://${RetrievePkgbuildApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/update"
