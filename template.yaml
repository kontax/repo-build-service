AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Template used for building AUR packages and adding them to a custom S3-based repository.

Parameters:
  PersonalRepository:
    Type: String
    Description: The URL of the location of the personal repository
  RepoName:
    Type: String
    Description: The name of the personal repository - usually the name of the DB file without the extension
  RepoArch:
    Type: String
    Description: The architecture to build the packages for
    Default: "x86_64"
  PackageTable:
    Type: String
    Description: Name of the table containing the list of existing Arch packages
    Default: package-list
  FanoutStatusTable:
    Type: String
    Description: Name of the table used to control the fan-in/out status of package building
    Default: fanout-status
  RepositoryCountries:
    Type: String
    Description: Comma-separated country codes used for finding the best mirror for package downloads
    Default: "IE,GB"
  GithubWebhookSecret:
    Type: String
    Description: Secret key used within the Github webhook
    Default: ABCD1234
  ECSCluster:
    Type: String
    Description: Name of the cluster used to contain the package building ECS tasks
    Default: "aur-pkgbuild-cluster"
  TaskDefinition:
    Type: String
    Description: Name of the ECS task used to build packages
    Default: "aur-pkgbuild-task"
  PushoverToken:
    Type: String
    Description: Token used to notify built packages via Pushover
    Default: '{{resolve:ssm:pushoverToken:1}}'
  PushoverUser:
    Type: String
    Description: User used to notify built packages via Pushover
    Default: '{{resolve:ssm:pushoverUser:1}}'

Globals:
  Function:
    Timeout: 3
    Runtime: python3.7
    Environment:
      Variables:
        PACKAGE_TABLE:
          Ref: PackageData

Resources:

  #####
  # Functions
  ###
  PackageUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: package-update
      Description: Scheduled updating of the package list in all repositories
      Runtime: python3.7
      CodeUri: package_updater
      Handler: update_packages.lambda_handler
      Timeout: 600
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PackageData
      Environment:
        Variables:
          COUNTRIES: !Ref RepositoryCountries
          PERSONAL_REPO: !Ref PersonalRepository
          PACKAGE_TABLE: !Ref PackageTable
      Events:
        PackageUpdateSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(6 hours)
      Layers:
        - !Ref AwsLayer

  PkgbuildRetrieverFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: pkgbuild-retriever
      Description: API for pulling the PKGBUILD from Github
      Runtime: python3.7
      CodeUri: pkgbuild_retriever
      Handler: retrieve_pkgbuild.lambda_handler
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PkgbuildParserFunction
      Environment:
        Variables:
          NEXT_FUNC: !GetAtt PkgbuildParserFunction.Arn
          GITHUB_WEBHOOK_SECRET: !Ref GithubWebhookSecret
      Events:
        RetrievePkgbuildApi:
          Type: Api
          Properties:
            Path: /update
            Method: post
      Layers:
        - !Ref AwsLayer

  PkgbuildParserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: pkgbuild-parser
      Description: Parses the PKGBUILD and extracts a list of packages from it
      Runtime: python3.7
      CodeUri: pkgbuild_parser
      Handler: parse_pkgbuild.lambda_handler
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PkgbuildFanoutStarterFunction
      Environment:
        Variables:
          NEXT_FUNC: !GetAtt PkgbuildFanoutStarterFunction.Arn
      Layers:
        - !Ref AwsLayer

  PkgbuildFanoutStarterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: pkgbuild-fanout-starter
      Description: A starter function to set up the fan-out and fan-in of building packages
      Runtime: python3.7
      CodeUri: fanout_starter
      Handler: starter.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FanoutStatusTable
        - SQSSendMessagePolicy:
            QueueName: !Ref FanoutQueue
      Environment:
        Variables:
          FANOUT_STATUS: !Ref FanoutStatusTable
          FANOUT_QUEUE: !GetAtt FanoutQueue.Arn
      Layers:
        - !Ref AwsLayer

  CheckPackageBuildFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: check-package-build
      Description: Checks each package on the queue and decides whether to build or ignore it
      Runtime: python3.7
      CodeUri: check_package
      Handler: package_checker.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PackageData
        - LambdaInvokePolicy:
            FunctionName: !Ref FanoutControllerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref BuildFunction
      Environment:
        Variables:
          FANOUT_CONTROLLER: !GetAtt FanoutControllerFunction.Arn
          PACKAGE_TABLE: !Ref PackageTable
          PERSONAL_REPO: !Ref PersonalRepository
          BUILD_FUNC: !GetAtt BuildFunction.Arn
      Events:
        FanoutQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt FanoutQueue.Arn
      Layers:
        - !Ref AwsLayer

  BuildFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: build-package
      Description: Starts an ECS task to build a package and adds the package to the build queue
      Runtime: python3.7
      CodeUri: build_package
      Handler: build.lambda_handler
      Role: !GetAtt ExtractRole.Arn
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !Ref BuildQueue
      Environment:
        Variables:
          BUILD_QUEUE: !GetAtt BuildQueue.Arn
          ECS_CLUSTER: !Ref ECSCluster
          TASK_DEFN: !Ref TaskDefinition
      Layers:
        - !Ref AwsLayer

  FanoutControllerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fanout-controller
      Description: Manages the parallel building of packages via the FanoutStatus table
      Runtime: python3.7
      CodeUri: fanout_controller
      Handler: controller.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FanoutStatusTable
        - LambdaInvokePolicy:
            FunctionName: !Ref MetapackageBuilderFunction
      Environment:
        Variables:
          FANOUT_STATUS: !Ref FanoutStatus
          METAPACKAGE_BUILDER: !GetAtt MetapackageBuilderFunction.Arn
      Layers:
        - !Ref AwsLayer

  MetapackageBuilderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: metapackage-builder
      Description: Retrieves the metapackage PKGBUILD and queues it for building
      Runtime: python3.7
      CodeUri: metapackage_builder
      Handler: metapackage.lambda_handler
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref BuildFunction
      Environment:
        Variables:
          BUILD_FUNC: !GetAtt BuildFunction.Arn
          PERSONAL_REPO: !Ref PersonalRepository
      Layers:
        - !Ref AwsLayer

  #####
  # Roles
  ###
  ExtractRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ExtractRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ExtractPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessageBatch
                  - sqs:SendMessage
                  - ecs:RunTask
                  - iam:GetRole
                  - iam:PassRole
                Resource:
                  - !GetAtt BuildQueue.Arn
                  - !Ref PkgbuildTaskDefinition
                  - !GetAtt BuildTaskRole.Arn

  BuildTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AurPkgBuildTaskRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AurPkgBuildTaskPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                  - s3:PutObjectAcl
                Resource:
                  - !Join [ '' , [ 'arn:aws:s3:::', !Ref PersonalRepository ] ]
                  - !GetAtt BuildQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource:
                  - 'arn:aws:s3:::*'

  #####
  # Layers
  ###
  AwsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: aws-dependencies
      Description: Dependencies for PKGBUILD apps
      ContentUri: src/
      CompatibleRuntimes:
        - python3.7
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  #####
  # Queue's
  ###
  FanoutQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "fanout-queue"

  BuildQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "aur-pkg-build"
      VisibilityTimeout: 600

  #####
  # ECS
  ###
  PkgbuildCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSCluster

  PkgbuildTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref TaskDefinition
      Cpu: "4096"
      Memory: "8192"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: !GetAtt BuildTaskRole.Arn
      ExecutionRoleArn: !GetAtt BuildTaskRole.Arn
      ContainerDefinitions:
        - Name: "aur-pkg-build"
          Image: "couldinho/aur-pkg-build:latest"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: "/ecs/aur-pkg-build"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          Environment:
            - Name: "PUSHOVER_TOKEN"
              Value: !Ref PushoverToken
            - Name: "PUSHOVER_USER"
              Value: !Ref PushoverUser
            - Name: "REPO_NAME"
              Value: !Ref RepoName
            - Name: "REPO_ARCH"
              Value: !Ref RepoArch
            - Name: "SQS_QUEUE_URL"
              Value: !Ref BuildQueue
            - Name: "AWS_REGION"
              Value: !Ref AWS::Region

  #####
  # Database Tables
  ###
  PackageData:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Ref PackageTable
      PrimaryKey:
        Name: PackageName
        Type: String

  FanoutStatus:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref FanoutStatusTable
      AttributeDefinitions:
        - AttributeName: PackageName
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
      KeySchema:
        - AttributeName: PackageName
          KeyType: HASH
        - AttributeName: Status
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3

Outputs:

  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  RetrievePkgbuildApi:
    Description: "API Gateway endpoint URL for Prod stage for PKGBUILD Retriever function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update"
  PackageUpdateFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt PackageUpdateFunction.Arn
  PackageUpdateFunctionIamRole:
    Description: "Implicit IAM Role created for Package Update function"
    Value: !GetAtt PackageUpdateFunctionRole.Arn
